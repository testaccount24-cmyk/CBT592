./ ADD NAME=DISPLAY  0100-02269-02269-1615-00291-00291-00000-SBGOLOB
         MACRO
&NAME    DISPLAY &DATA=
.*--------------------------------------------------------------------*
.*   Macro name:  DISPLAY                                             *
.*                                                                    *
.*   Purpose:  Provide a utility similar to the cobol 'EXHIBIT NAMED' *
.*             command.  This allows an assembler programmer to       *
.*             quickly display data in various formats for the        *
.*             purpose of debugging or verifying program execution.   *
.*             The use of this macro with the accompanying DISPLAY    *
.*             module eliminates the need to code a new DCB, OPEN it, *
.*             or format the data.                                    *
.*                                                                    *
.*             DISPLAYed output is double spaced between invocations  *
.*             of the DISPLAY macro so multiple fields 'DISPLAY'ed    *
.*             at one time are grouped together.  A sequence number   *
.*             is also printed to aid in debugging.  You may DISPLAY  *
.*             multiple data elements on each invocation.  If you     *
.*             request more than can be printed on one line, as much  *
.*             as can be printed without spanning a field will be     *
.*             printed per line, single spaced between lines.  Data   *
.*             elements will always be printed in the sequence they   *
.*             appear in the arguement list.                          *
.*                                                                    *
.*             Output from a field will be:                           *
.*                NAME:VALUE                                          *
.*             Where NAME is either 1) The field name if a label was  *
.*             coded, or 2) 'ITEMNNNN' if register notation was       *
.*             used (NNNN is 1 for the first time, 2 for the second,  *
.*             3 for the third, etc), or 3) 'userdata' if a character *
.*             string was used.  Value will be the value in the       *
.*             data element, the format is determined by the field    *
.*             type.  Valid types and the output format are:          *
.*                                                                    *
.*              TYPE      FORMAT                                      *
.*               B      Binary.  Each byte is translated to a string  *
.*                      of eight 1'S and 0'S.  Length is required.    *
.*                      Output length is 8 Times input length.        *
.*                      Maximum length is 12.                         *
.*                                                                    *
.*               C      Character.  Unprintable characters will be    *
.*                      Translated out to prevent data checks on the  *
.*                      printer.  Length is required.  Output length  *
.*                      is equal to source field length.  Maximum     *
.*                      length is 115.                                *
.*                                                                    *
.*               F      Fullword.  Full-word value is converted to    *
.*                      Decimal.  Output is 10 Digits, leading zeros  *
.*                      suppressed, with floating leading negative    *
.*                      (-) sign.                                     *
.*                                                                    *
.*               H      Halfword.  Half-word value is converted to    *
.*                      decimal.  Output is 5 digits, leading zeros   *
.*                      suppressed, with floating leading negative    *
.*                      (-) sign.                                     *
.*                                                                    *
.*               R      Register contents.  Register contents are     *
.*                      printed as 8 hex digits.                      *
.*                                                                    *
.*               P      Packed decimal.  Packed decimal value is      *
.*                      printed as edited decimal value.  Output      *
.*                      length is 2 times input length.  Number of    *
.*                      digits is 2 times input length minus 1.       *
.*                      Leading zeros will be suppressed.  Minus      *
.*                      sign is floating.  Length is required.        *
.*                      Maximum length is 15.                         *
.*                                                                    *
.*               X      Hex.  Each byte is printed as two hex digits. *
.*                      Length is required.  Output length is 2 times *
.*                      input length.  Maximum length is 57.          *
.*                                                                    *
.*               Character strings enclosed in quotes can also be     *
.*               Coded.  These are treated just like character data.  *
.*               The length is determined by the length between the   *
.*               Enclosing quotes, imbedded quotes are not allowed.   *
.*                                                                    *
.*               Coding sequence is:                                  *
.*                                                                    *
.*               DISPLAY DATA=(ITEM1,TYPE1,LENGTH1,                   *
.*                             ITEM2,TYPE2,LENGTH2,                   *
.*                                       .                            *
.*                                       .                            *
.*                                       .                            *
.*                                       )                            *
.*                                                                    *
.*               The 'ITEM' parameter may be:                         *
.*                  1) A Label                                        *
.*                  2) A register enclosed in parenthesis             *
.*                  3) A Character string enclosed in quotes          *
.*                                                                    *
.*               THE 'TYPE' PARAMETER MAY BE:                         *
.*                  B  for binary data                                *
.*                  C  for character                                  *
.*                  F  for fullword                                   *
.*                  H  for halfword                                   *
.*                  P  for packed decimal                             *
.*                  X  for hex                                        *
.*         or omitted on character strings  (TYPE 3)                  *
.*                                                                    *
.*                The 'length' may be                                 *
.*                  1) length of source field in bytes                *
.*                  2) a register enclosed in parenthesis             *
.*         or omitted on halfwords, fullwords, or character strings.  *
.*                                                                    *
.*                                                                    *
.*   **** Please note that all parameters are positional and ****     *
.*   **** if any are omitted, such as lengths on halfwords   ****     *
.*   **** or fullwords, code a comma to indicate its absense.****     *
.*   ****                                                    ****     *
.*   **** For example to code a display for two halfword     ****     *
.*   **** fields use:                                        ****     *
.*   ****          DISPLAY DATA=(HALF1,H,,HALF2,H,)          ****     *
.*   ****                                                    ****     *
.*                                                                    *
.*         The print routine requires a JCL statement:                *
.*             //DISPLAY DD SYSOUT=class                              *
.*                                                                    *
.*--------------------------------------------------------------------*
         LCLA    &ITEMS,&SUB1,&SUB2,&SUB3,&MAX,&ERROR,&WORK
         LCLC    &CURITEM,&CURTYPE,&CURLEN
         LCLC    &I(100),&T(100),&L(100)
&MAX     SETA    (N'&DATA/3)
&SUB1    SETA    &MAX*3
         AIF     (&SUB1 NE N'&DATA).ERR001
&SUB1    SETA    1
&ITEMS   SETA    1
.TYPE000 ANOP
&SUB2    SETA    &SUB1+1
&SUB3    SETA    &SUB1+2
&CURITEM SETC    '&DATA(&SUB1)'
&CURTYPE SETC    '&DATA(&SUB2)'
&CURLEN  SETC    '&DATA(&SUB3)'
         AIF     ('&CURTYPE' EQ 'C').TYPE010
         AIF     ('&CURTYPE' EQ 'F').TYPE020
         AIF     ('&CURTYPE' EQ 'H').TYPE030
         AIF     ('&CURTYPE' EQ 'P').TYPE040
         AIF     ('&CURTYPE' EQ 'X').TYPE050
         AIF     ('&CURTYPE' EQ 'B').TYPE060
         AIF     ('&CURTYPE' EQ 'R').TYPE070
         AIF     ('&CURITEM'(1,1) EQ '''').TYPE080
         MNOTE   12,'INVALID DATA TYPE ''&CURITEM'' '
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE010 ANOP
         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100
         AIF     ('&CURLEN' GT '0').TYPE011
         MNOTE   12,'CHARACTER DATA WITH LENGTH < 1 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE011 ANOP
         AIF     ('&CURLEN' LT '116').TYPE100
         MNOTE   12,'CHARACTER DATA WITH LENGTH > 115 INVALID'
         AGO     .TYPE100
.TYPE020 ANOP
         MNOTE   'LENGTH IGNORED ON FULLWORD FIELDS'
&CURLEN  SETC   '4'
         AGO     .TYPE100
.TYPE030 ANOP
         MNOTE   'LENGTH IGNORED ON HALFWORD FIELDS'
&CURLEN  SETC   '2'
         AGO     .TYPE100
.TYPE040 ANOP
         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100
         AIF     ('&CURLEN' GT '0').TYPE041
         MNOTE   12,'PACKED DECIMAL WITH LENGTH < 1 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE041 ANOP
         AIF     ('&CURLEN' LT '16').TYPE100
         MNOTE   12,'PACKED DECIMAL WITH LENGTH > 15 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE050 ANOP
         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100
         AIF     ('&CURLEN' GT '0').TYPE051
         MNOTE   12,'HEX DATA WITH LENGTH < 1 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE051 ANOP
         AIF     ('&CURLEN' LT '58').TYPE100
         MNOTE   12,'HEX DATA WITH LENGTH > 57 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE060 ANOP
         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100
         AIF     ('&CURLEN' GT '0').TYPE061
         MNOTE   12,'BINARY DATA WITH LENGTH < 1 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE061 ANOP
         AIF     (&CURLEN LT 13).TYPE100
         MNOTE   12,'BINARY DATA WITH LENGTH > 12 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE070 ANOP
         AIF     ('&CURITEM'(1,1) NE '(').TYPE07X
         MNOTE   'LENGTH IGNORED ON REGISTER CONTENTS FIELDS'
&CURLEN  SETC    '4'
         AGO     .TYPE100
.TYPE07X ANOP
&ERROR   SETA    1
         MNOTE   12,'REGISTER MUST BE ENCLOSED IN PARENTHESIS'
         AGO     .TYPE100
.TYPE080 ANOP
         AIF    (K'&CURITEM LT 117).TYPE090
         MNOTE   'SELF DEFINING TERM WITH LENGTH > 115 INVALID'
&ERROR   SETA    1
         AGO     .TYPE100
.TYPE090 ANOP
&WORK    SETA    K'&CURITEM-2
&CURTYPE SETC    'C'
&CURLEN  SETC    '&WORK'
         MNOTE   'SELF DEFINING TERM TYPE AND LENGTH AUTOMATICALLY GENN+
               ED'
.TYPE100 ANOP
&I(&ITEMS) SETC  '&CURITEM'
&T(&ITEMS) SETC  '&CURTYPE'
&L(&ITEMS) SETC  '&CURLEN'
         AIF     (&ITEMS EQ &MAX).LBL0000
&SUB1    SETA    &SUB1+3
&ITEMS   SETA    &ITEMS+1
         AGO     .TYPE000
.LBL0000 ANOP
         AIF     (T'&NAME EQ 'O').RELO000
&NAME    DS      0H
.RELO000 ANOP
         AIF     (&ERROR EQ 1).EXIT000
&ITEMS   SETA    1
.RELO010 ANOP
&CURITEM SETC    '&I(&ITEMS)'
&CURLEN  SETC    '&L(&ITEMS)'
         AIF     ('&CURITEM'(1,1) NE '(').RELO020
&AWORK   SETA    K'&CURITEM-2
&CWORK   SETC    '&CURITEM'(2,&AWORK)
         STCM    &CWORK,15,A&SYSNDX&ITEMS
         AGO     .RELO030
.RELO020 ANOP
         AIF     ('&CURITEM'(1,1) NE '''').RELO030
         LA      R1,=C&CURITEM
         STCM    R1,15,A&SYSNDX&ITEMS
.RELO030 ANOP
         AIF     ('&CURLEN'(1,1)  NE '(').RELO040
&AWORK   SETA    K'&CURLEN-2
&CWORK   SETC    '&CURLEN'(2,&AWORK)
         STCM    &CWORK,3,L&SYSNDX&ITEMS
.RELO040 ANOP
         AIF     (&ITEMS EQ &MAX).GEN0000
&ITEMS   SETA    &ITEMS+1
         AGO     .RELO010
.GEN0000 ANOP
         B       L&SYSNDX
&ITEMS   SETA    1
.GEN0010 ANOP
&CURITEM SETC    '&I(&ITEMS)'
&CURTYPE SETC    '&T(&ITEMS)'
&CURLEN  SETC    '&L(&ITEMS)'
         AIF     ('&CURITEM'(1,1) EQ '(').GEN0020
         AIF     ('&CURITEM'(1,1) EQ '''').GEN0030
N&SYSNDX&ITEMS   DC      CL8'&CURITEM'        ITEM NAME
A&SYSNDX&ITEMS   DC      AL4(&CURITEM)        ITEM ADDRESS
         AGO     .GEN0040
.GEN0020 ANOP
N&SYSNDX&ITEMS   DC      CL8'ITEM&ITEMS'      ITEM ID
A&SYSNDX&ITEMS   DC      AL4(0)               ITEM ADDRESS
         AGO     .GEN0040
.GEN0030 ANOP
N&SYSNDX&ITEMS   DC      CL8'USERDATA'        ITEM NAME
A&SYSNDX&ITEMS   DC      AL4(0)               ITEM ADDRESS
.GEN0040 ANOP
                 DC      CL1'&CURTYPE'        DATA TYPE
         AIF     ('&CURLEN'(1,1) EQ '(').GEN0045
L&SYSNDX&ITEMS   DC      AL2(&CURLEN)         DATA LENGTH
         AGO     .GEN0047
.GEN0045 ANOP
L&SYSNDX&ITEMS   DC      AL2(0)               DATA LENGTH
.GEN0047 ANOP
         AIF     (&ITEMS EQ &MAX).GEN0050
&ITEMS   SETA    &ITEMS+1
         AGO     .GEN0010
.GEN0050 ANOP
V&SYSNDX         DC      VL4(DISPLAY)         DISPLAY MODULE ADDRESS
L&SYSNDX DS      0H
         LA      R1,N&SYSNDX.1                SET PARM LIST ADDRESS
         ICM     R15,15,V&SYSNDX              DISPLAY ENTRY POINT
         BALR    R14,R15                      LINK TO DISPLAY MODULE
         MEXIT
.ERR001  ANOP
      MNOTE   12,'INVALID ''DATA'' PARAMETER, COUNT NOT MULTIPLE OF 3'
.EXIT000 ANOP
         MNOTE   'ERRORS DETECTED, GEN ABORTED'
         MEND
